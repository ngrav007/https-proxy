#!/bin/bash

# Configuration file for scripts in parent directory - defines constants

# Workspace Directory
WORKSPACE="/workspaces"
DEV_DIR="${WORKSPACE}/Development"
WORK_DIR="${DEV_DIR}/http-proxy"
LOCAL_ETC="${WORK_DIR}/etc"
LOCAL_CERTS="${LOCAL_ETC}/certs"
LOCAL_KEYS="${LOCAL_ETC}/private"
LOCAL_PASSWDS="${LOCAL_ETC}/passwd"
LOCAL_EXTS="${LOCAL_ETC}/ext"
LOCAL_CSRS="${LOCAL_ETC}/csr"

# CA Certificate Directory
CA_CERTS_DIR="/usr/local/share/ca-certificates"

# SSL Directory
SSL_DIR="/etc/ssl"

# Trusted Certificate Directory
SSL_CERTS="${SSL_DIR}/certs"

# Trusted Private Key Directory
SSL_KEYS="${SSL_DIR}/private"

# OpenSSL Configuration File
OPENSSL_CONFIG="${SSL_DIR}/openssl.cnf"

# Default Password
DEFAULT_PASSWD="friend"

# ---------------------------------------------------------------------------------------------------
# Root CA Certificate
ROOTCA_CN="EregionRootCA"
ROOTCA_CRT="${LOCAL_CERTS}/${ROOTCA_CN}.pem"
ROOTCA_KEY="${LOCAL_KEYS}/${ROOTCA_CN}.key"
ROOTCA_PASSWD="${LOCAL_PASSWDS}/${ROOTCA_CN}.passwd"

# ---------------------------------------------------------------------------------------------------
# Proxy and Client Common Names
PROXY_CN="eregion.proxy"
LOCAL_PROXY_CERT="${LOCAL_CERTS}/${PROXY_CN}.crt"
LOCAL_PROXY_KEY="${LOCAL_KEYS}/${PROXY_CN}.key"
LOCAL_PROXY_CSR="${LOCAL_CSRS}/${PROXY_CN}.csr"
LOCAL_PROXY_EXT="${LOCAL_EXTS}/${PROXY_CN}.ext"
CLIENT_CN="eregion.client"
PROXY_DNS_COUNT=3

# --------------------------------------------------------------------------------------------------
# Subject Fields
COUNTRY="US"
STATE="MA"
LOCALITY="Local"
ORGANIZATION="Ennor"
ORGANIZATION_UNIT="Ennor"

SUBJECT_ROOT="/C=${COUNTRY}/ST=${STATE}/L=${LOCALITY}/O=${ORGANIZATION}/OU=${ORGANIZATION_UNIT}/CN=${ROOTCA_CN}"
SUBJECT_DEV="/C=${COUNTRY}/ST=${STATE}/L=${LOCALITY}/O=${ORGANIZATION}/OU=${ORGANIZATION_UNIT}/CN="

# --------------------------------------------------------------------------------------------------

# Check Directories Exist --------------------------------------------------------------------------
# Workspace Directory
if [ ! -d "${WORKSPACE}" ]; then
    echo "[config] Workspace directory ${WORKSPACE} not found"
    exit 1
fi

# Local Development Directory
if [ ! -d "${DEV_DIR}" ]; then
    echo "[config] Development directory ${DEV_DIR} not found"
    exit 1
fi

# Local Project Directory
if [ ! -d "${WORK_DIR}" ]; then
    echo "[config] Work directory ${WORK_DIR} not found"
    exit 1
fi

# Local Etc Directory
if [ ! -d "${LOCAL_CERTS}" ]; then
    echo "[config] Certificate directory ${LOCAL_CERTS} not found"
    exit 1
fi

# Local Private Key Directory
if [ ! -d "${LOCAL_KEYS}" ]; then
    echo "[config] Private Key directory ${LOCAL_KEYS} not found"
    exit 1
fi

# Local Password Directory
if [ ! -d "${LOCAL_PASSWDS}" ]; then
    echo "[config] Password directory ${LOCAL_PASSWDS} not found"
    exit 1
fi

# Local Extension Directory
if [ ! -d "${LOCAL_EXTS}" ]; then
    echo "[config] Extension directory ${LOCAL_EXTS} not found"
    exit 1
fi

# CA Certificate Directory
if [ ! -d "${CA_CERTS_DIR}" ]; then
    echo "[config] CA Certificate directory ${CA_CERTS_DIR} not found"
    exit 1
fi

# SSL Directory
if [ ! -d "${SSL_DIR}" ]; then
    echo "[config] SSL directory ${SSL_DIR} not found"
    exit 1
fi

# SSL Directory - Trusted Certificates
if [ ! -d "${SSL_CERTS}" ]; then
    echo "[config] Trusted Certificate directory ${SSL_CERTS} not found"
    exit 1
fi

# SSL Directory - Private Keys
if [ ! -d "${SSL_KEYS}" ]; then
    echo "[config] Trusted Private Key directory ${SSL_KEYS} not found"
    exit 1
fi

# OpenSSL Configuration File
if [ ! -f "${OPENSSL_CONFIG}" ]; then
    echo "[config] OpenSSL configuration file ${OPENSSL_CONFIG} not found"
    exit 1
fi

# Ensure Passwords Exist -------------------------------------------
# Root CA Password
if [ ! -f "${ROOTCA_PASSWD}" ]; then
    echo "[config] Root CA Password file ${ROOTCA_PASSWD} not found, using default password"
    echo -n "${DEFAULT_PASSWD}" > "${ROOTCA_PASSWD}"
fi
